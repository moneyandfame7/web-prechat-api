# QUERIES, MUTATIONS, SUBSCRIPTIONS #
type Query {
  getHistory(input: GetHistoryInput!): [Message!]!
  getPrivateChat: Any
}
type Mutation {
  sendMessage(input: SendMessageInput!): NewMessagePayload!
  deleteMessages(input: DeleteMessagesInput!): Boolean!
  editMessage(input: EditMessageInput!): Message!
  readHistory(input: ReadHistoryInput!): Boolean!
  saveDraft(input: SaveDraftInput!): Boolean!
}
type Subscription {
  onNewMessage: NewMessagePayload!
  onDeleteMessages: DeleteMessagesPayload!
  onEditMessage: EditMessagePayload!
  onDraftUpdate: UpdateDraftPayload!
  onReadHistoryInbox: ReadHistoryInboxPayload!
  onReadHistoryOutbox: ReadHistoryOutboxPayload!
}

# ------------------------ #

enum HistoryDirection {
  Backwards
  Around
  Forwards
}
input GetHistoryInput {
  direction: HistoryDirection!
  chatId: String!
  maxDate: DateTime
  offsetId: String
  limit: Int
  includeOffset: Boolean
}
input DeleteMessagesInput {
  ids: [String!]!
}
input SendMessageInput {
  # I provide Id for optimistic render
  # мейбі прибрати айді, залишити тільки ордер
  id: String!
  orderedId: Int!
  chatId: String!
  sendAs: String
  silent: Boolean
  entities: [MessageEntityInput!]
  text: String
}
input EditMessageInput {
  chatId: String!
  messageId: String!
  text: String!
}
input ReadHistoryInput {
  chatId: String!
  maxId: Int!
}
input SaveDraftInput {
  text: String
  chatId: String!
}

type UpdateDraftPayload {
  chatId: String!
  ownerId: String!
  text: String
}
type DeleteMessagesPayload {
  ids: [String!]!
  chat: Chat!
}

# ТЕ, ЩО ЧИТАЮ Я!
type ReadHistoryInboxPayload {
  chatId: String!
  maxId: Int!
  newUnreadCount: Int!
}
# ТЕ, ЩО ЧИТАЄ ЮЗЕР!
type ReadHistoryOutboxPayload {
  chatId: String!
  maxId: Int!
}
enum MessageEntityType {
  italic
  bold
  underline
  strike
  spoiler
  email
  phone
  url
  textUrl
  mention
  code
  hashtag
}
input MessageEntityInput {
  start: Int!
  end: Int!
  type: MessageEntityType!
}
type NewMessagePayload {
  chat: Chat!
  message: Message!
}
type EditMessagePayload {
  message: Message!
}

type Message {
  id: String!
  orderedId: Int!
  senderId: String
  chatId: String!
  _chatId: String
  text: String

  createdAt: DateTime!
  updatedAt: DateTime
  editedAt: DateTime
  # noForwards - check privacy in builder?
  isPost: Boolean
  isOutgoing: Boolean!

  postAuthor: String
  views: Int

  action: MessageAction

  content: MessageContent!
}
type MessageContent {
  action: MessageAction
  formattedText: MessageFormattedText
}

type MessageEntity {
  start: Int!
  end: Int!
  type: MessageEntityType!
}
type MessageFormattedText {
  text: String
  entities: [MessageEntity!]
}
enum MessageActionType {
  chatCreate
  channelCreate
}
type MessageAction {
  text: String!
  type: MessageActionType!
  users: [String!]!
  photo: Photo
  values: [String!]
}
