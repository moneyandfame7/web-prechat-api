scalar InputPeer

enum ChatType {
  chatTypeGroup
  chatTypeChannel
  chatTypePrivate
}
type Chat {
  id: String!
  userId: String
  # folderId
  color: ColorVariants!
  type: ChatType!
  title: String!
  photo: Photo
  membersCount: Int
  unreadCount: Int
  isNotJoined: Boolean
  isForbidden: Boolean
  isSupport: Boolean
  lastMessage: Message
  isOwner: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  isSavedMessages: Boolean
  isPinned: Boolean
  inviteLink: String
  _id: String!
}

type ChatMember {
  userId: String!
  inviterId: String
  promotedByUserId: String
  kickedByUserId: String
  joinedDate: DateTime
  customTitle: String
  userPermissions: ChatPermissions
  adminPermissions: AdminPermissions
  isAdmin: Boolean
  isOwner: Boolean
}

type ChatFull {
  members: [ChatMember!]!
  onlineCount: Int
  description: String
  areMembersHidden: Boolean
  historyForNewMembers: Boolean
  permissions: ChatPermissions
  currentUserPermissions: ChatPermissions
  currentAdminPermissions: AdminPermissions
}

type ChatPermissions {
  canSendMessages: Boolean
  canSendMedia: Boolean
  canInviteUsers: Boolean
  canPinMessages: Boolean
  canChangeInfo: Boolean
}
type AdminPermissions {
  canChangeInfo: Boolean
  canDeleteMessages: Boolean
  canBanUsers: Boolean
  canInviteUsers: Boolean
  canPinMessages: Boolean
  canAddNewAdmins: Boolean
}
input InputChat {
  chatId: String!
}

union Peer = Chat | User

input CreateGroupInput {
  users: [String!]!
  title: String!
}

input CreateChannelInput {
  users: [String!]
  title: String!
  description: String
}

input AddChatMembersInput {
  chatId: String!
  userIds: [String!]!
}
input DeleteChatMemberInput {
  chatId: String!
  userId: String!
}

# type GetChatSettings {
#   users: [User!]!
#   settings: ChatSettings!
# }

type Query {
  # getChatSettings(input: ChatInput!): GetChatSettings!
  getChats: [Chat!]!
  getChat(chatId: String!): Chat!
  getChatFull(chatId: String!): ChatFull!
  resolveUsername(username: String!): Peer
}

type Mutation {
  createChannel(input: CreateChannelInput!): Chat!
  createGroup(input: CreateGroupInput!): Chat!
  addChatMembers(input: AddChatMembersInput!): Any
  deleteChatMember(input: DeleteChatMemberInput): Any
  deleteChat(input: InputChat!): Any
}

type ChatCreatedUpdate {
  chat: Chat!
  users: [User!]!
}
# мейбі зробити як в тг, тип Update або SubscribePublish або щось таке, і там зробити масив чатів, масив юзерів ( або їх айдішніки просто )

type Subscription {
  onChatCreated: ChatCreatedUpdate!
}
