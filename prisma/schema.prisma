// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CHAT MEDIA
enum AvatarVariants {
  GREEN
  PINK
  BLUE
  YELLOW
  PURPLE
  ORANGE

  @@map("avatar_variants")
}

model ChatAvatar {
  id            String         @id @default(uuid())
  avatarVariant AvatarVariants @map("avatar_variant")
  fullUserInfo  UserFullInfo?

  @@map("chat_avatars")
}

model Session {
  id        String   @id @default(uuid())
  ip        String
  region    String
  country   String
  platform  String
  browser   String
  createdAt DateTime @default(now()) @map("created_at")
  activeAt  DateTime @default(now()) @map("active_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("sessions")
}

model User {
  id          String  @id @default(uuid())
  username    String? @unique
  phoneNumber String  @unique @map("phone_number")
  firstName   String  @map("first_name")
  lastName    String? @map("last_name")

  createdAt DateTime  @default(now()) @map("created_at")
  apiToken  ApiToken?

  twoFaAuth       TwoFaAuth?
  chats           ChatMember[]
  sessions        Session[]
  contacts        Contact[]    @relation(name: "ContactToOwner")
  addedByContacts Contact[]    @relation(name: "ContactToUser")

  blockedUsers   UserBlock[] @relation(name: "BlockedUsers")
  blockedByUsers UserBlock[] @relation(name: "BlockedByUsers")

  fullInfo   UserFullInfo @relation(fields: [fullInfoId], references: [id], onDelete: Cascade)
  fullInfoId String       @unique @map("full_info_id")

  privacySettings   PrivacySettings @relation(fields: [privacySettingsId], references: [id])
  privacySettingsId String          @unique

  allowedInPrivacyRules PrivacyRule[] @relation(name: "AllowedUsers")
  blockedInPrivacyRules PrivacyRule[] @relation(name: "BlockedUsers")

  // adminIn
  @@index(fields: [username, phoneNumber, id])
  @@map("users")
}

model Contact {
  id        String  @id @default(uuid())
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  // userSeeThisPhoto (suggestedPhoto) - я можу додати для контакта інше фото, яке він буде бачити?
  // iSeeOnUserThisPhoto (pickedPhoto) - я можу додати контакту своє фото
  owner     User    @relation(fields: [ownerId], references: [id], name: "ContactToOwner")
  ownerId   String  @map("owner_id")

  contact   User   @relation(fields: [contactId], references: [id], name: "ContactToUser")
  contactId String @map("contact_id")

  @@map("contacts")
}

model UserBlock {
  id        String @id @default(uuid())
  blocker   User   @relation(fields: [blockerId], references: [id], name: "BlockedByUsers")
  blockerId String @map("blocker_id")
  blocked   User   @relation(fields: [blockedId], references: [id], name: "BlockedUsers")
  blockedId String @map("blocked_id")

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model ApiToken {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
  hash   String

  @@map("api_tokens")
}

enum ChatType {
  chatTypeGroup
  chatTypeChannel
  chatTypePrivate

  @@map("chat_types")
}

model Chat {
  id String @id @default(uuid())

  title       String
  isPrivate   Boolean?         @map("is_private")
  createdAt   DateTime         @default(now()) @map("created_at")
  type        ChatType
  // members     ChatMember[]
  fullInfo    ChatFullInfo?
  permissions ChatPermissions?

  @@map("chats")
}

model ChatFullInfo {
  id String @id @default(uuid())

  description          String?
  historyForNewMembers Boolean? @default(true) @map("history_for_new_members")
  //  admins
  chat                 Chat     @relation(fields: [chatId], references: [id])
  chatId               String   @unique @map("chat_id")

  members ChatMember[]
  // @@index([chatId])

  @@map("chats_full_info")
}

model ChatMember {
  id String @id @default(uuid())

  isPinned     Boolean? @default(false) @map("is_pinned")
  isMuted      Boolean? @default(false) @map("is_muted")
  unreadCount  Int?     @default(0) @map("unread_count")
  inviterId    String?  @map("inviter_id")
  promotedById String?  @map("promoted_by_id")
  kickedById   String?  @map("kicked_by_id")

  adminRights ChatAdminRights?
  isAdmin     Boolean?
  isOwner     Boolean?

  chatInfo   ChatFullInfo @relation(fields: [chatInfoId], references: [chatId])
  chatInfoId String       @map("chat_id")

  member User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  // chat   Chat   @relation(fields: [chatId], references: [id])
  // chatId String @unique @map("chat_id")
  // member ChatMember

  @@map("chat_members")
}

model ChatPermissions {
  id String @id @default(uuid())

  canSendMessage Boolean @default(true) @map("can_send_messages")
  canSendMedia   Boolean @default(true) @map("can_send_media")
  canInviteUsers Boolean @default(true) @map("can_invite_users")
  canPinMessages Boolean @default(true) @map("can_pin_messages")
  canChangeInfo  Boolean @default(true) @map("can_change_info")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @unique @map("chat_id")

  // @@index([chatId])

  @@map("chat_permissions")
}

model ChatAdminRights {
  id String @id @default(uuid())

  canChangeInfo     Boolean? @default(true) @map("can_change_info")
  canDeleteMessages Boolean? @default(true) @map("can_delete_messages")
  canBanUsers       Boolean? @default(true) @map("can_ban_users")
  canInviteUsers    Boolean? @default(true) @map("can_invite_users")
  canPinMessages    Boolean? @default(true) @map("can_pin_messages")
  canAddNewAdmins   Boolean? @default(true) @map("can_add_new_admins")

  member      ChatMember @relation(fields: [userId], references: [id])
  userId      String     @unique @map("userId")
  customTitle String?    @map("custom_title")
  // @@index([adminId])

  @@map("chat_admin_rights")
}

// USER SETTINGS

model TwoFaAuth {
  id       String  @id @default(uuid())
  password String
  email    String? @unique
  hint     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("two_fa_auth")
}

model UserFullInfo {
  id String @id @default(uuid())

  avatar   ChatAvatar @relation(fields: [avatarId], references: [id])
  avatarId String     @unique @map("avatar_id")
  bio      String?

  user User?

  @@map("users_full_info")
}

enum PrivacyVisibility {
  Nobody
  Everybody
  Contacts

  @@map("privacy_visibilities")
}

model PrivacySettings {
  id String @id @default(uuid())

  user User?

  phoneNumber   PrivacyRule @relation(fields: [phoneNumberId], references: [id], name: "PrivacyPhoneNumber")
  phoneNumberId String      @unique @map("phone_number_id")

  lastSeen   PrivacyRule @relation(fields: [lastSeenId], references: [id], name: "PrivacyLastSeen")
  lastSeenId String      @unique @map("last_seen_id")

  profilePhoto   PrivacyRule @relation(fields: [profilePhotoId], references: [id], name: "PrivacyProfilePhoto")
  profilePhotoId String      @unique @map("profile_photo_id")

  addForwardLink   PrivacyRule @relation(fields: [addForwardLinkId], references: [id], name: "PrivacyAddForwardLink")
  addForwardLinkId String      @unique @map("add_forward_link_id")

  addByPhone   PrivacyRule @relation(fields: [addByPhoneId], references: [id], name: "PrivacyAddByPhone")
  addByPhoneId String      @unique @map("add_by_phone_id")

  chatInvite   PrivacyRule @relation(fields: [chatInviteId], references: [id], name: "PrivacyChatInvite")
  chatInviteId String      @unique @map("chat_invite_id")

  @@map("privacy_settings")
}

model PrivacyRule {
  id String @id @default(uuid())

  visibility   PrivacyVisibility @default(Everybody)
  allowedUsers User[]            @relation(name: "AllowedUsers")
  blockedUsers User[]            @relation(name: "BlockedUsers")

  phoneNumberSettings    PrivacySettings? @relation(name: "PrivacyPhoneNumber")
  lastSeenSettings       PrivacySettings? @relation(name: "PrivacyLastSeen")
  addByPhoneSettings     PrivacySettings? @relation(name: "PrivacyAddByPhone")
  profilePhotoSettings   PrivacySettings? @relation(name: "PrivacyProfilePhoto")
  addForwardLinkSettings PrivacySettings? @relation(name: "PrivacyAddForwardLink")
  chatInviteSettings     PrivacySettings? @relation(name: "PrivacyChatInvite")

  @@map("privacy_rules")
}
