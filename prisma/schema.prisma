// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CHAT MEDIA
enum ColorVariants {
  GREEN
  PINK
  BLUE
  YELLOW
  PURPLE
  ORANGE

  @@map("color_variants")
}

model Photo {
  id       String   @id @unique @default(uuid())
  date     DateTime @default(now())
  blurHash String
  url      String
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique

  chatFull          ChatFullInfo?      @relation(fields: [chatFullId], references: [id])
  chatFullId        String?
  messageMediaPhoto MessageMediaPhoto?
  messageAction     MessageAction?
}

model Session {
  id        String   @id @default(uuid())
  ip        String
  region    String
  country   String
  platform  String
  browser   String
  createdAt DateTime @default(now()) @map("created_at")
  activeAt  DateTime @default(now()) @map("active_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@index([userId])
  @@map("sessions")
}

model User {
  id           String        @id @default(uuid())
  username     String?       @unique
  phoneNumber  String        @unique @map("phone_number")
  firstName    String        @map("first_name")
  lastName     String?       @map("last_name")
  bio          String?
  isDeleted    Boolean       @default(false)
  lastActivity DateTime?
  photo        Photo?
  createdAt    DateTime      @default(now()) @map("created_at")
  apiToken     ApiToken?
  color        ColorVariants
  twoFaAuth    TwoFaAuth?
  chats        ChatMember[]

  sessions        Session[]
  contacts        Contact[]   @relation(name: "ContactToOwner")
  addedByContacts Contact[]   @relation(name: "ContactToUser")
  blockedUsers    UserBlock[] @relation(name: "BlockedUsers")
  blockedByUsers  UserBlock[] @relation(name: "BlockedByUsers")

  privacySettings   PrivacySettings @relation(fields: [privacySettingsId], references: [id])
  privacySettingsId String          @unique

  allowedInPrivacyRules PrivacyRule[] @relation(name: "AllowedUsers")
  blockedInPrivacyRules PrivacyRule[] @relation(name: "BlockedUsers")

  // adminIn
  @@index(fields: [username, phoneNumber, id])
  @@map("users")
}

enum MessageActionType {
  chatCreate
  channelCreate
  deletePhoto
  editTitle
  joinedByLink
  messagePinned
  deleteUser
  addUser
  other
}

// ACTIONS
model MessageAction {
  id        String            @id @unique @default(uuid())
  text      String
  photo     Photo?            @relation(fields: [photoId], references: [id])
  photoId   String?           @unique
  type      MessageActionType @default(other)
  message   Message           @relation(fields: [messageId], references: [id])
  messageId String            @unique
  users     String[] // JUST STORE ARRAY????
  values    String[]
}

// MEDIA ( rewrite to "content" )
model MessageMedia {
  id                   String                @id @unique @default(uuid())
  messageMediaPhoto    MessageMediaPhoto?
  messageMediaContact  MessageMediaContact?
  messageMediaDocument MessageMediaDocument?
  messageMediaPoll     MessageMediaPoll?
  message              Message               @relation(fields: [messageId], references: [id])
  messageId            String                @unique
}

model MessageMediaPhoto {
  id         String       @id @default(uuid())
  spoiler    Boolean?
  photo      Photo        @relation(fields: [photoId], references: [id])
  photoId    String       @unique
  ttlSeconds Int?
  inMessage  MessageMedia @relation(fields: [messageId], references: [messageId])
  messageId  String       @unique
}

model MessageMediaContact {
  id          String       @id @unique @default(uuid())
  phoneNumber String
  firstName   String
  lastName    String?
  userId      String?
  inMessage   MessageMedia @relation(fields: [messageId], references: [messageId])
  messageId   String       @unique
}

model MessageMediaDocument {
  id         String       @id @unique @default(uuid())
  spoiler    Boolean?
  ttlSeconds Int?
  document   Document     @relation(fields: [documentId], references: [id])
  documentId String       @unique
  inMessage  MessageMedia @relation(fields: [messageId], references: [messageId])
  messageId  String       @unique
}

model MessageMediaPoll {
  id     String @id @unique @default(uuid())
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String @unique

  inMessage MessageMedia @relation(fields: [messageId], references: [messageId])
  messageId String       @unique
}

// POLLS

model Poll {
  id              String            @id @unique @default(uuid())
  inMessageMedia  MessageMediaPoll?
  isClosed        Boolean           @default(false)
  isAnonymous     Boolean           @default(false)
  isQuiz          Boolean           @default(false)
  multiplieChoise Boolean           @default(false)
  closeDate       DateTime? // int?
  answers         PollAnswer[]
  question        String
  solution        String?
}

model PollAnswer {
  id        Int          @id @default(autoincrement())
  text      String
  voters    ChatMember[]
  poll      Poll         @relation(fields: [pollId], references: [id])
  pollId    String
  isCorrect Boolean?
}

// @todo мейбі зробити окрему таблицю для blurhash
model Document {
  id String @id @unique @default(uuid())

  inMessageMedia MessageMediaDocument?
  blurHash       String?
  size           Int
  mimeType       String
  createdAt      DateTime              @default(now())
}

enum DeletedFor {
  deleteForAll
  deleteForMe
}

model Message {
  id     String @id @unique @default(uuid())
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String // ??

  media          MessageMedia?
  action         MessageAction?
  sender         ChatMember     @relation(fields: [senderId], references: [id])
  senderId       String // ??
  text           String?
  isLastIn       Chat?          @relation(name: "LastMessageIn", fields: [isLastInChatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isLastInChatId String?        @unique

  isPinned         Boolean?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // for channel/groups?
  isPost           Boolean?
  replyToMessageId String?
  postAuthor       String?
  views            Int?
}

model MessageForward {
  id String @id @unique @default(uuid())

  fromChatId    String?
  fromMessageId String?
  senderUserId  String?
}

model Contact {
  id        String  @id @default(uuid())
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  // userSeeThisPhoto (suggestedPhoto) - я можу додати для контакта інше фото, яке він буде бачити?
  // iSeeOnUserThisPhoto (pickedPhoto) - я можу додати контакту своє фото
  owner     User    @relation(fields: [ownerId], references: [id], name: "ContactToOwner")
  ownerId   String  @map("owner_id")

  contact   User   @relation(fields: [contactId], references: [id], name: "ContactToUser")
  contactId String @map("contact_id")

  @@map("contacts")
}

model UserBlock {
  id        String @id @default(uuid())
  blocker   User   @relation(fields: [blockerId], references: [id], name: "BlockedByUsers")
  blockerId String @map("blocker_id")
  blocked   User   @relation(fields: [blockedId], references: [id], name: "BlockedUsers")
  blockedId String @map("blocked_id")

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model ApiToken {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")
  hash   String

  @@map("api_tokens")
}

enum ChatType {
  chatTypeGroup
  chatTypeChannel
  chatTypePrivate

  @@map("chat_types")
}

model Chat {
  id String @id @default(uuid())

  photo       Photo?
  color       ColorVariants
  title       String
  inviteLink  String?
  isPrivate   Boolean?         @map("is_private")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt
  type        ChatType
  // members     ChatMember[]
  fullInfo    ChatFullInfo?
  permissions ChatPermissions?
  messages    Message[]
  lastMessage Message?         @relation(name: "LastMessageIn")

  @@index([id])
  @@map("chats")
}

model ChatFullInfo {
  id String @id @default(uuid())

  description          String?
  historyForNewMembers Boolean? @default(true) @map("history_for_new_members")
  canViewMembers       Boolean? @default(true)
  chat                 Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId               String   @unique

  members ChatMember[]

  // kickedMembers ChatMember[]

  // @@index([chatId])
  Photo Photo[]

  @@map("chats_full_info")
}

model ChatMember {
  id String @id @default(uuid())

  isPinned     Boolean?  @default(false) @map("is_pinned")
  isMuted      Boolean?  @default(false) @map("is_muted")
  unreadCount  Int?      @default(0) @map("unread_count")
  draft        String?
  joinedDate   DateTime? @default(now())
  inviterId    String?   @map("inviter_id")
  promotedById String?   @map("promoted_by_id")
  kickedById   String?   @map("kicked_by_id")

  // if admin - only admin permissions, else - only user
  adminPermissions ChatAdminPermissions?
  userPermissions  ChatPermissions?
  isAdmin          Boolean?
  isOwner          Boolean?

  chatInfo   ChatFullInfo @relation(fields: [chatInfoId], references: [chatId])
  chatInfoId String       @map("chat_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  votedAnswers PollAnswer[]
  messages     Message[]
  // chat   Chat   @relation(fields: [chatId], references: [id])
  // chatId String @unique @map("chat_id")
  // member ChatMember

  @@index([userId])
  @@map("chat_members")
}

// model ChatMemberMessage {}

model ChatPermissions {
  id String @id @default(uuid())

  canSendMessages Boolean @default(true) @map("can_send_messages")
  canSendMedia    Boolean @default(true) @map("can_send_media")
  canInviteUsers  Boolean @default(true) @map("can_invite_users")
  canPinMessages  Boolean @default(true) @map("can_pin_messages")
  canChangeInfo   Boolean @default(true) @map("can_change_info")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @unique @map("chat_id")

  member   ChatMember? @relation(fields: [memberId], references: [id])
  memberId String?     @unique

  // @@index([chatId])

  @@map("chat_permissions")
}

model ChatAdminPermissions {
  id String @id @default(uuid())

  canChangeInfo     Boolean? @default(true) @map("can_change_info")
  canDeleteMessages Boolean? @default(true) @map("can_delete_messages")
  canBanUsers       Boolean? @default(true) @map("can_ban_users")
  canInviteUsers    Boolean? @default(true) @map("can_invite_users")
  canPinMessages    Boolean? @default(true) @map("can_pin_messages")
  canAddNewAdmins   Boolean? @default(true) @map("can_add_new_admins")

  member      ChatMember @relation(fields: [userId], references: [id])
  userId      String     @unique @map("userId")
  customTitle String?    @map("custom_title")
  // @@index([adminId])

  @@map("chat_admin_permissions")
}

// USER SETTINGS

model TwoFaAuth {
  id       String  @id @default(uuid())
  password String
  email    String? @unique
  hint     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@index([userId])
  @@map("two_fa_auth")
}

enum PrivacyVisibility {
  Nobody
  Everybody
  Contacts

  @@map("privacy_visibilities")
}

model PrivacySettings {
  id String @id @default(uuid())

  user User?

  phoneNumber   PrivacyRule @relation(fields: [phoneNumberId], references: [id], name: "PrivacyPhoneNumber")
  phoneNumberId String      @unique @map("phone_number_id")

  lastSeen   PrivacyRule @relation(fields: [lastSeenId], references: [id], name: "PrivacyLastSeen")
  lastSeenId String      @unique @map("last_seen_id")

  profilePhoto   PrivacyRule @relation(fields: [profilePhotoId], references: [id], name: "PrivacyProfilePhoto")
  profilePhotoId String      @unique @map("profile_photo_id")

  addForwardLink   PrivacyRule @relation(fields: [addForwardLinkId], references: [id], name: "PrivacyAddForwardLink")
  addForwardLinkId String      @unique @map("add_forward_link_id")

  addByPhone   PrivacyRule @relation(fields: [addByPhoneId], references: [id], name: "PrivacyAddByPhone")
  addByPhoneId String      @unique @map("add_by_phone_id")

  chatInvite   PrivacyRule @relation(fields: [chatInviteId], references: [id], name: "PrivacyChatInvite")
  chatInviteId String      @unique @map("chat_invite_id")

  @@map("privacy_settings")
}

model PrivacyRule {
  id String @id @default(uuid())

  visibility   PrivacyVisibility @default(Everybody)
  allowedUsers User[]            @relation(name: "AllowedUsers")
  blockedUsers User[]            @relation(name: "BlockedUsers")

  phoneNumberSettings    PrivacySettings? @relation(name: "PrivacyPhoneNumber")
  lastSeenSettings       PrivacySettings? @relation(name: "PrivacyLastSeen")
  addByPhoneSettings     PrivacySettings? @relation(name: "PrivacyAddByPhone")
  profilePhotoSettings   PrivacySettings? @relation(name: "PrivacyProfilePhoto")
  addForwardLinkSettings PrivacySettings? @relation(name: "PrivacyAddForwardLink")
  chatInviteSettings     PrivacySettings? @relation(name: "PrivacyChatInvite")

  @@map("privacy_rules")
}
