// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CHAT MEDIA
enum ColorVariants {
  GREEN
  PINK
  BLUE
  YELLOW
  PURPLE
  ORANGE

  @@map("color_variants")
}

model Photo {
  id            String         @id @unique @default(uuid())
  date          DateTime       @default(now())
  blurHash      String
  url           String
  chat          Chat?          @relation(fields: [chatId], references: [id])
  chatId        String?        @unique
  user          User?          @relation(fields: [userId], references: [id])
  userId        String?        @unique
  width         Int?
  height        Int?
  messageAction MessageAction?

  @@map("photos")
}

model Session {
  id        String   @id @default(uuid())
  ip        String
  region    String
  country   String
  platform  String
  browser   String
  createdAt DateTime @default(now()) @map("created_at")
  activeAt  DateTime @default(now()) @map("active_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@index([userId])
  @@map("sessions")
}

model User {
  id           String        @id @default(uuid())
  username     String?       @unique
  phoneNumber  String        @unique @map("phone_number")
  firstName    String        @map("first_name")
  lastName     String?       @map("last_name")
  bio          String?
  isDeleted    Boolean       @default(false)
  lastActivity DateTime?
  photo        Photo?
  createdAt    DateTime      @default(now()) @map("created_at")
  // apiToken          ApiToken?
  color        ColorVariants
  chats        ChatMember[]
  messages     Message[]

  sessions        Session[]
  contacts        Contact[] @relation(name: "ContactToOwner")
  addedByContacts Contact[] @relation(name: "ContactToUser")
  // pinnedMessages    PinnedMessage[]

  // adminIn
  @@index(fields: [username, phoneNumber, id])
  @@map("users")
}

enum MessageActionType {
  chatCreate
  channelCreate
  deletePhoto
  editTitle
  joinedByLink
  messagePinned
  deleteUser
  addUser
  other
}

// +???
// ACTIONS
model MessageAction {
  id        String            @id @unique @default(uuid())
  text      String
  photo     Photo?            @relation(fields: [photoId], references: [id])
  photoId   String?           @unique
  type      MessageActionType @default(other)
  message   Message           @relation(fields: [messageId], references: [id])
  messageId String            @unique
  users     String[] // JUST STORE ARRAY????
  values    String[]
}

model Message {
  id             String         @id @unique @default(uuid())
  orderedId      Int            @map("ordered_id")
  chat           Chat           @relation(fields: [chatId], references: [id])
  chatId         String // ??
  isPinnedForAll Boolean?       @map("pinned_for_all")
  action         MessageAction?
  entities       Json?
  sender         User           @relation(fields: [senderId], references: [id])
  senderId       String         @map("sender_id")
  text           String?
  isLastIn       Chat?          @relation(name: "LastMessageIn", fields: [isLastInChatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isLastInChatId String?        @unique

  isSilent         Boolean?  @map("silent")
  createdAt        DateTime  @default(now())
  editedAt         DateTime?
  updatedAt        DateTime  @updatedAt
  isPost           Boolean?  @map("post")
  replyToMessageId String?   @map("reply_to_msg_id") // ?????
  postAuthor       String?   @map("post_author")
  views            Int?

  lastReadedBy ChatMember[]
}

model Contact {
  id        String  @id @default(uuid())
  firstName String  @map("first_name")
  lastName  String? @map("last_name")
  // userSeeThisPhoto (suggestedPhoto) - я можу додати для контакта інше фото, яке він буде бачити?
  // iSeeOnUserThisPhoto (pickedPhoto) - я можу додати контакту своє фото
  owner     User    @relation(fields: [ownerId], references: [id], name: "ContactToOwner")
  ownerId   String  @map("owner_id")

  contact   User   @relation(fields: [contactId], references: [id], name: "ContactToUser")
  contactId String @map("contact_id")

  @@map("contacts")
}

enum ChatType {
  chatTypeGroup
  chatTypeChannel
  chatTypePrivate

  @@map("chat_types")
}

model Chat {
  id String @id @default(uuid())

  photo       Photo?
  color       ColorVariants
  title       String
  inviteLink  String?
  isPrivate   Boolean?      @map("is_private")
  isService   Boolean?      @default(false)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt
  type        ChatType
  // members     ChatMember[]
  fullInfo    ChatFullInfo?
  messages    Message[]
  lastMessage Message?      @relation(name: "LastMessageIn")

  @@index([id])
  @@map("chats")
}

model ChatFullInfo {
  id String @id @default(uuid())

  description          String?
  historyForNewMembers Boolean? @default(true) @map("history_for_new_members")
  canViewMembers       Boolean? @default(true)
  chat                 Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId               String   @unique

  members ChatMember[]

  @@map("chats_full_info")
}

model ChatMember {
  id String @id @default(uuid())

  isPinned   Boolean? @default(false) @map("is_pinned")
  isMuted    Boolean? @default(false) @map("is_muted")
  isArchived Boolean? @default(false) @map("is_archived")

  isAdmin Boolean?
  isOwner Boolean?

  unreadCount  Int?      @default(0) @map("unread_count")
  draft        String?
  joinedDate   DateTime? @default(now())
  inviterId    String?   @map("inviter_id")
  promotedById String?   @map("promoted_by_id")
  kickedById   String?   @map("kicked_by_id")

  chatInfo   ChatFullInfo @relation(fields: [chatInfoId], references: [chatId])
  chatInfoId String       @map("chat_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  lastReadMessage   Message? @relation(fields: [lastReadMessageId], references: [id])
  lastReadMessageId String?

  // /* lastReadOutgoing */
  // /* lastReadIncoming 
  // messages     Message[]
  // chat   Chat   @relation(fields: [chatId], references: [id])
  // chatId String @unique @map("chat_id")
  // member ChatMember

  @@index([userId])
  @@map("chat_members")
}
